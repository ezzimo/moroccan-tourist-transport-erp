"""
Tests for booking authentication and authorization
"""
import pytest
from fastapi.testclient import TestClient
from main import app
from database import get_session, get_redis
from test_database import get_test_session, get_test_redis
import uuid


@pytest.fixture
def client():
    """Create test client with dependency overrides"""
    app.dependency_overrides[get_session] = get_test_session
    app.dependency_overrides[get_redis] = get_test_redis
    
    with TestClient(app) as test_client:
        yield test_client
    
    app.dependency_overrides.clear()


@pytest.fixture
def admin_token():
    """Mock admin JWT token for testing"""
    # This would normally be generated by your auth service
    # For testing, we'll use a mock token that passes validation
    return "mock-admin-token-with-booking-create-permission"


@pytest.fixture
def user_token():
    """Mock user JWT token without booking permissions"""
    return "mock-user-token-without-booking-permission"


class TestBookingAuthentication:
    """Test booking endpoint authentication and authorization"""
    
    def test_create_booking_requires_auth(self, client):
        """Test that creating booking requires authentication"""
        booking_data = {
            "customer_id": str(uuid.uuid4()),
            "service_type": "Tour",
            "pax_count": 4,
            "lead_passenger_name": "Test Customer",
            "lead_passenger_email": "test@example.com",
            "lead_passenger_phone": "+212612345678",
            "start_date": "2024-03-15",
            "base_price": 1000.00
        }
        
        # Request without Authorization header
        response = client.post("/api/v1/bookings/", json=booking_data)
        
        assert response.status_code == 401
        assert "Could not validate credentials" in response.json()["detail"]
    
    def test_create_booking_with_valid_permission(self, client, admin_token):
        """Test booking creation with valid permission"""
        # Mock the auth dependency to return a user with proper permissions
        from utils.auth import get_current_user, CurrentUser
        
        def mock_get_current_user():
            return CurrentUser(
                user_id=uuid.uuid4(),
                email="admin@example.com",
                full_name="Admin User",
                permissions=["booking:create:bookings", "booking:read:bookings"]
            )
        
        app.dependency_overrides[get_current_user] = mock_get_current_user
        
        booking_data = {
            "customer_id": str(uuid.uuid4()),
            "service_type": "Tour",
            "pax_count": 4,
            "lead_passenger_name": "Test Customer",
            "lead_passenger_email": "test@example.com",
            "lead_passenger_phone": "+212612345678",
            "start_date": "2024-03-15",
            "base_price": 1000.00
        }
        
        response = client.post(
            "/api/v1/bookings/",
            json=booking_data,
            headers={"Authorization": f"Bearer {admin_token}"}
        )
        
        # Should succeed with proper permissions
        assert response.status_code in [200, 201]
        
        # Clean up override
        del app.dependency_overrides[get_current_user]
    
    def test_create_booking_without_permission(self, client, user_token):
        """Test booking creation without proper permission"""
        from utils.auth import get_current_user, CurrentUser
        
        def mock_get_current_user_no_perms():
            return CurrentUser(
                user_id=uuid.uuid4(),
                email="user@example.com",
                full_name="Regular User",
                permissions=["booking:read:bookings"]  # Missing create permission
            )
        
        app.dependency_overrides[get_current_user] = mock_get_current_user_no_perms
        
        booking_data = {
            "customer_id": str(uuid.uuid4()),
            "service_type": "Tour",
            "pax_count": 4,
            "lead_passenger_name": "Test Customer",
            "lead_passenger_email": "test@example.com",
            "lead_passenger_phone": "+212612345678",
            "start_date": "2024-03-15",
            "base_price": 1000.00
        }
        
        response = client.post(
            "/api/v1/bookings/",
            json=booking_data,
            headers={"Authorization": f"Bearer {user_token}"}
        )
        
        # Should fail with 403 Forbidden
        assert response.status_code == 403
        assert "Permission denied" in response.json()["detail"]
        
        # Clean up override
        del app.dependency_overrides[get_current_user]
    
    def test_pricing_calculate_requires_permission(self, client):
        """Test that pricing calculation requires proper permission"""
        pricing_data = {
            "service_type": "Tour",
            "base_price": 1000.00,
            "pax_count": 4,
            "start_date": "2024-03-15"
        }
        
        # Request without Authorization header
        response = client.post("/api/v1/pricing/calculate", json=pricing_data)
        
        assert response.status_code == 401
    
    def test_pricing_calculate_with_permission(self, client, admin_token):
        """Test pricing calculation with valid permission"""
        from utils.auth import get_current_user, CurrentUser
        
        def mock_get_current_user():
            return CurrentUser(
                user_id=uuid.uuid4(),
                email="admin@example.com",
                full_name="Admin User",
                permissions=["booking:read:pricing", "booking:create:bookings"]
            )
        
        app.dependency_overrides[get_current_user] = mock_get_current_user
        
        pricing_data = {
            "service_type": "Tour",
            "base_price": 1000.00,
            "pax_count": 4,
            "start_date": "2024-03-15"
        }
        
        response = client.post(
            "/api/v1/pricing/calculate",
            json=pricing_data,
            headers={"Authorization": f"Bearer {admin_token}"}
        )
        
        # Should succeed with proper permissions
        assert response.status_code == 200
        
        result = response.json()
        assert "base_price" in result
        assert "total_price" in result
        assert "discount_amount" in result
        assert "applied_rules" in result
        
        # Clean up override
        del app.dependency_overrides[get_current_user]